{
	"updateUserProfile": {
		"prefix": "updateUserProfile",
		"description": "updateUserProfile",
		"scope": "javascript",
		"body": [
			"function editFormSubmit(evt) {",
			"  evt.preventDefault();",
			"  profileName.textContent = editModalNameInput.value;",
			"  profileDescription.textContent = editModalDescriptionInput.value;",
			"  closeModal(editModal);",
			"",
			"profileEditBtn.addEventListener(\"click\", () =>{",
			"  editModalNameInput.value = profileName.textContent;",
			"  editModalDescriptionInput.value = profileDescription.textContent;",
			"  openModal(editModal);",
			"});"
		]
	},
	"getCardsLoop": {
		"prefix": "getCardsLoop",
		"description": "getCardsLoop",
		"scope": "javascript",
		"body": [
			"initialCards.forEach((cardItem )=> {",
			"  const card = getCardElement(cardItem);",
			"  cardList.append(card);",
			"});"
		]
	},
	"userPost": {
		"prefix": "userPost",
		"description": "userPost",
		"scope": "javascript",
		"body": [
			"newPostBtn.addEventListener(\"click\", () => {",
			"  openModal(newPostModal);",
			"});",
			"",
			"function newPostSubmit(evt){",
			"  evt.preventDefault();",
			"  const newPostInputs = {",
			"    name: newPostCaptionInput.value,",
			"    link: newPostURLInput.value",
			"    }",
			"    const newPost = getCardElement(newPostInputs);",
			"    cardList.prepend(newPost);",
			"    closeModal(newPostModal);",
			"}",
			"",
			"newPostCloseBtn.addEventListener(\"click\", () => {",
			"  closeModal(newPostModal);",
			"});"
		]
	},
	"openModal": {
		"prefix": "openModal",
		"description": "openModal",
		"scope": "javascript",
		"body": [
			"",
			"function openModal(modal){",
			"modal.classList.add(\"modal_opened\");",
			"modal.classList.add(\"modal__fade-in\");",
			"}"
		]
	},
	"getCard1": {
		"prefix": "getCard",
		"description": "getCard",
		"scope": "javascript",
		"body": [
			"",
			"function getCardElement(data) {",
			"  console.log(data);",
			"  const card = cardTemplate.content.querySelector(\".card\").cloneNode(true);",
			"  const cardImg = card.querySelector(\".card__image\");",
			"  card.querySelector(\".card__title\").textContent = data.name;",
			"  cardImg.src = data.link;",
			"  cardImg.alt = data.name;",
			"  cardImg.addEventListener(\"click\", () => {",
			"    openModal(previewModal);",
			"    previewImg.src = data.link;",
			"    previewImg.alt = data.name;",
			"    previewCaption.textContent = data.name;",
			"  });",
			"  const likeBtn = card.querySelector(\".card__like\");",
			"  likeBtn.addEventListener(\"click\", () => {",
			"    likeBtn.classList.toggle(\"card__like_liked\");",
			"  });",
			"  const deleteBtn = card.querySelector(\".card__delete\");",
			"  deleteBtn.addEventListener(\"click\", () => {",
			"",
			"   card.remove();",
			"",
			"  });",
			"",
			"  return card;",
			"}",
			""
		]
	},
	"getCard": {
		"prefix": "getCard",
		"description": "getCard",
		"scope": "javascript",
		"body": [
			"",
			"function getCardElement(data) {",
			"  console.log(data);",
			"  const card = cardTemplate.content.querySelector(\".card\").cloneNode(true);",
			"  const cardImg = card.querySelector(\".card__image\");",
			"  card.querySelector(\".card__title\").textContent = data.name;",
			"  cardImg.src = data.link;",
			"  cardImg.alt = data.name;",
			"  cardImg.addEventListener(\"click\", () => {",
			"    openModal(previewModal);",
			"    previewImg.src = data.link;",
			"    previewImg.alt = data.name;",
			"    previewCaption.textContent = data.name;",
			"  });",
			"  const likeBtn = card.querySelector(\".card__like\");",
			"  likeBtn.addEventListener(\"click\", () => {",
			"    likeBtn.classList.toggle(\"card__like_liked\");",
			"  });",
			"  const deleteBtn = card.querySelector(\".card__delete\");",
			"  deleteBtn.addEventListener(\"click\", () => {",
			"",
			"   card.remove();",
			"",
			"  });",
			"",
			"  return card;",
			"}",
			""
		]
	},
	"getScore": {
		"prefix": "getScore",
		"description": "getScore",
		"scope": "javascript",
		"body": [
			"const getScore = (startScore = 0, endScore = startScore) => {\r",
			"    for (let i = 0; i <= 10; i += 1) {\r",
			"        endScore = Math.random() > 0.5 ? endScore + 1 : endScore;\r",
			"    }\r",
			"\r",
			"    return endScore;\r",
			"}"
		]
	}
}